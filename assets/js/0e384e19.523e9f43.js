"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[976],{2053:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>o,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"intro","title":"Introduction","description":"An introduction to Planck","source":"@site/docs/intro.md","sourceDirName":".","slug":"/intro","permalink":"/planck/docs/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/YetAnotherClown/planck/edit/main/docs/intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Introduction","description":"An introduction to Planck","sidebar_position":1},"sidebar":"defaultSidebar","next":{"title":"Plugins","permalink":"/planck/docs/plugins/"}}');var l=s(4848),t=s(8453);const a={title:"Introduction",description:"An introduction to Planck",sidebar_position:1},i="Introduction",c={},d=[{value:"Installation",id:"installation",level:2},{value:"The Basics",id:"the-basics",level:2},{value:"Phases",id:"phases",level:3},{value:"Pipelines",id:"pipelines",level:3},{value:"Built-in Pipelines &amp; Phases",id:"built-in-pipelines--phases",level:3},{value:"Startup",id:"startup",level:4},{value:"Engine Events",id:"engine-events",level:4},{value:"Main",id:"main",level:4},{value:"Systems",id:"systems",level:3},{value:"The Scheduler",id:"the-scheduler",level:3}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(n.p,{children:"You can install Planck with Wally"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-toml",children:'[dependencies]\r\nPlanck = "yetanotherclown/planck@0.1.0-rc.1"\n'})}),"\n",(0,l.jsx)(n.h2,{id:"the-basics",children:"The Basics"}),"\n",(0,l.jsx)(n.h3,{id:"phases",children:"Phases"}),"\n",(0,l.jsx)(n.p,{children:"A Phase is just a tag you can assign to your systems, it's a way to order systems as a group."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local myPhase = Phase.new("debugName")\r\n\r\nscheduler\r\n    :insert(myPhase, RunService, "Heartbeat")\r\n    :addSystems(systemA, myPhase)\n'})}),"\n",(0,l.jsx)(n.h3,{id:"pipelines",children:"Pipelines"}),"\n",(0,l.jsx)(n.p,{children:"A Pipeline is a group of ordered phases. Each phase will run in the fixed order to which each Phase was passed to it."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local myPipeline = Pipeline.new()\r\n    :insert(phaseA)\r\n    :insert(phaseB)\r\n    :insert(phaseC)\r\n\r\nscheduler\r\n    :insert(myPipeline, RunService, "Heartbeat")\n'})}),"\n",(0,l.jsx)(n.h3,{id:"built-in-pipelines--phases",children:"Built-in Pipelines & Phases"}),"\n",(0,l.jsx)(n.h4,{id:"startup",children:"Startup"}),"\n",(0,l.jsx)(n.p,{children:"Systems on these phases will run exactly once, before any other phase runs."}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"PreStartup"}),"\n",(0,l.jsx)(n.li,{children:"Startup"}),"\n",(0,l.jsx)(n.li,{children:"PostStartup"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Planck = require("@packages/Planck")\r\nlocal Phase = Planck.Phase\r\n\r\nlocal PreStartup = Phase.PreStartup\r\nlocal Startup = Phase.Startup\r\nlocal PostStartup = Phase.PostStartup\n'})}),"\n",(0,l.jsx)(n.h4,{id:"engine-events",children:"Engine Events"}),"\n",(0,l.jsx)(n.p,{children:"These Phases are ran on Engine RunService Events,\r\nevents are ran in the order listed."}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Event"}),(0,l.jsx)(n.th,{children:"Phase"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"PreRender"}),(0,l.jsx)(n.td,{children:"PreRender"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"PreAnimation"}),(0,l.jsx)(n.td,{children:"PreAnimation"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"PreSimulation"}),(0,l.jsx)(n.td,{children:"PreSimulation"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"PostSimulation"}),(0,l.jsx)(n.td,{children:"PostSimulation"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Heartbeat"}),(0,l.jsx)(n.td,{children:"Update"})]})]})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Planck = require("@packages/Planck")\r\nlocal Phase = Planck.Phase\r\n\r\nlocal PreRender = Phase.PreRender\r\nlocal PreAnimation = Phase.PreAnimation\r\nlocal PreSimulation = Phase.PreSimulation\r\nlocal PostSimulation = Phase.PostSimulation\r\nlocal Update = Phase.Update\n'})}),"\n",(0,l.jsx)(n.h4,{id:"main",children:"Main"}),"\n",(0,l.jsxs)(n.p,{children:["The Main Pipeline will run phases on the ",(0,l.jsx)(n.code,{children:"RunService.Heartbeat"})," event."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"First"}),"\n",(0,l.jsx)(n.li,{children:"PreUpdate"}),"\n",(0,l.jsx)(n.li,{children:"Update"}),"\n",(0,l.jsx)(n.li,{children:"PostUpdate"}),"\n",(0,l.jsx)(n.li,{children:"Last"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Planck = require("@packages/Planck")\r\nlocal Phase = Planck.Phase\r\n\r\nlocal First = Phase.First\r\nlocal PreUpdate = Phase.PreUpdate\r\nlocal Update = Phase.Update\r\nlocal PostUpdate = Phase.PostUpdate\r\nlocal Last = Phase.Last\n'})}),"\n",(0,l.jsx)(n.h3,{id:"systems",children:"Systems"}),"\n",(0,l.jsx)(n.p,{children:"A system is just a function, or it could be a system table."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:"local systemA = {\r\n    phase = myPhase,\r\n    system = function()\r\n        -- ...\r\n    end,\r\n}\r\n\r\nlocal function systemB()\r\n    -- ...\r\nend\r\n\r\nscheduler\r\n    :addSystems(systemA)\r\n    :addSystems(systemB, myPhase)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"the-scheduler",children:"The Scheduler"}),"\n",(0,l.jsx)(n.p,{children:"The Scheduler is where you initialize all your Pipelines, Phases, and Systems."}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-lua",children:'local Planck = require("@packages/Planck")\r\n\r\nlocal Phase = Planck.Phase\r\nlocal Pipeline = Planck.Pipeline\r\nlocal Scheduler = Planck.Scheduler\r\n\r\nlocal PreUpdate = Phase.new()\r\nlocal Update = Phase.new()\r\nlocal PostUpdate = Phase.new()\r\n\r\nlocal UpdatePipeline = Pipeline.new()\r\n\t:insert(PreUpdate)\r\n\t:insert(Update)\r\n\t:insert(PostUpdate)\r\n\r\nlocal Render = Phase.new()\r\n\r\nlocal scheduler = scheduler.new(world)\r\n    :insert(UpdatePipeline, RunService, "Heartbeat")\r\n    :insertAfter(Render, UpdatePipeline)\r\n    :addSystems(systems, Update)\r\n\r\nscheduler:removeSystem(systemA)\r\nscheduler:replaceSystem(systemA, systemB)\r\n\r\nscheduler:editSystem(systemA, newPhase)\r\nscheduler:editSystem(systemA)\r\n\r\nscheduler:setRunCondition(systemA, function(world)\r\n    return someCondition and true or false\r\nend)\n'})})]})}function o(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(h,{...e})}):h(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var r=s(6540);const l={},t=r.createContext(l);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);