"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[220],{49080:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"design/phases-and-pipelines","title":"Phases and Pipelines","description":"Designing with Phases and Pipelines","source":"@site/docs/design/phases-and-pipelines.md","sourceDirName":"design","slug":"/design/phases-and-pipelines","permalink":"/planck/docs/design/phases-and-pipelines","draft":false,"unlisted":false,"editUrl":"https://github.com/YetAnotherClown/planck/edit/main/docs/design/phases-and-pipelines.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Phases and Pipelines","description":"Designing with Phases and Pipelines","sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"Systems","permalink":"/planck/docs/design/systems"},"next":{"title":"Conditions","permalink":"/planck/docs/design/conditions"}}');var t=s(74848),a=s(28453);const r={title:"Phases and Pipelines",description:"Designing with Phases and Pipelines",sidebar_position:3},o="Phases and Pipelines",l={},d=[{value:"Phases",id:"phases",level:2},{value:"Pipelines",id:"pipelines",level:2},{value:"What&#39;s Next",id:"whats-next",level:2}];function h(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"phases-and-pipelines",children:"Phases and Pipelines"})}),"\n",(0,t.jsx)(n.h2,{id:"phases",children:"Phases"}),"\n",(0,t.jsx)(n.p,{children:"When you're working with custom Phases, it is important to try and reduce\r\nthe complexity of your order of execution. Too many Phases could prove\r\ndifficult to work with if they are not managed properly."}),"\n",(0,t.jsxs)(n.p,{children:["When you have multiple ",(0,t.jsx)(n.em,{children:"related"})," phases, which means phases that all run on\r\nthe same event, and in order of one after another, you should create a\r\nPipeline to manage them."]}),"\n",(0,t.jsx)(n.h2,{id:"pipelines",children:"Pipelines"}),"\n",(0,t.jsx)(n.p,{children:"Pipelines are ordered groups of Phases, they make it easy to work with large\r\ncollections of Phases when they run on the same event."}),"\n",(0,t.jsxs)(n.p,{children:["An example of a Pipeline would be the built-in ",(0,t.jsx)(n.code,{children:"RunService.Heartbeat"}),"\r\nPipeline, appropriately named 'Main'."]}),"\n",(0,t.jsx)(n.p,{children:"First -> PreUpdate -> Update -> PostUpdate -> Last"}),"\n",(0,t.jsxs)(n.p,{children:["All of these Phases run on the same event, ",(0,t.jsx)(n.code,{children:"RunService.Heartbeat"}),". And they\r\nare explicitly ordered to run one after another."]}),"\n",(0,t.jsx)(n.p,{children:"By grouping Phases like this, we can manage them more effectively. Here's\r\nan example of what I mean:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local Phase = Planck.Phase\r\nlocal Pipeline = Planck.Pipeline\r\nlocal Scheduler = Planck.Scheduler\r\n\r\nlocal PreUpdate = Phase.new()\r\nlocal Update = Phase.new()\r\nlocal PostUpdate = Phase.new()\r\n\r\nlocal UpdatePipeline = Pipeline.new()\r\n\t:insert(PreUpdate)\r\n\t:insert(Update)\r\n\t:insert(PostUpdate)\r\n\r\nlocal scheduler = scheduler.new(world)\r\n    :insert(UpdatePipeline, RunService, "Heartbeat")\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Instead of using ",(0,t.jsx)(n.code,{children:"insert"})," on every Phase, we instead just insert the\r\nPipeline and all of the Phases in the Pipeline are inserted on the same\r\nevent."]}),"\n",(0,t.jsx)(n.h2,{id:"whats-next",children:"What's Next"}),"\n",(0,t.jsx)(n.p,{children:"Let's look into Conditions, which allow us to set strict conditions on\r\nwhen a System, Phase, or Pipeline can run."}),"\n",(0,t.jsxs)(n.p,{children:["It's important to note that conditions ",(0,t.jsx)(n.em,{children:"do not"})," run any code. When a Phase\r\nis executed, it will check the conditions on itself and it's systems, if the\r\nconditions are met, the Phase or System will run."]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(96540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);