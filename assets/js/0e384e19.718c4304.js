"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=l,h=u["".concat(o,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,s=new Array(r);s[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:l,s[1]=i;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const r={title:"Introduction",description:"An introduction to Planck",sidebar_position:1},s="Introduction",i={unversionedId:"intro",id:"intro",title:"Introduction",description:"An introduction to Planck",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/planck/docs/intro",draft:!1,editUrl:"https://github.com/YetAnotherClown/planck/edit/main/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Introduction",description:"An introduction to Planck",sidebar_position:1},sidebar:"defaultSidebar"},o={},p=[{value:"Installation",id:"installation",level:2},{value:"The Basics",id:"the-basics",level:2},{value:"Phases",id:"phases",level:3},{value:"Pipelines",id:"pipelines",level:3},{value:"Built-in Pipelines &amp; Phases",id:"built-in-pipelines--phases",level:3},{value:"Startup",id:"startup",level:4},{value:"Engine Events",id:"engine-events",level:4},{value:"Main",id:"main",level:4},{value:"Systems",id:"systems",level:3},{value:"The Scheduler",id:"the-scheduler",level:3}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"introduction"},"Introduction"),(0,l.kt)("h2",{id:"installation"},"Installation"),(0,l.kt)("p",null,"You can install Planck with Wally"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nPlanck = "yetanotherclown/planck@0.1.0"\n')),(0,l.kt)("h2",{id:"the-basics"},"The Basics"),(0,l.kt)("h3",{id:"phases"},"Phases"),(0,l.kt)("p",null,"A Phase is just a tag you can assign to your systems, it's a way to order systems as a group."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local myPhase = Phase.new("debugName")\n\nscheduler\n    :insert(myPhase, RunService, "Heartbeat")\n    :addSystems(systemA, myPhase)\n')),(0,l.kt)("h3",{id:"pipelines"},"Pipelines"),(0,l.kt)("p",null,"A Pipeline is a group of ordered phases. Each phase will run in the fixed order to which each Phase was passed to it."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local myPipeline = Pipeline.new()\n    :insert(phaseA)\n    :insert(phaseB)\n    :insert(phaseC)\n\nscheduler\n    :insert(myPipeline, RunService, "Heartbeat")\n')),(0,l.kt)("h3",{id:"built-in-pipelines--phases"},"Built-in Pipelines & Phases"),(0,l.kt)("h4",{id:"startup"},"Startup"),(0,l.kt)("p",null,"Systems on these phases will run exactly once, before any other phase runs."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"PreStartup"),(0,l.kt)("li",{parentName:"ul"},"Startup"),(0,l.kt)("li",{parentName:"ul"},"PostStartup")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local Planck = require("@packages/Planck")\nlocal Phase = Planck.Phase\n\nlocal PreStartup = Phase.PreStartup\nlocal Startup = Phase.Startup\nlocal PostStartup = Phase.PostStartup\n')),(0,l.kt)("h4",{id:"engine-events"},"Engine Events"),(0,l.kt)("p",null,"These Phases are ran on Engine RunService Events,\nevents are ran in the order listed."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Event"),(0,l.kt)("th",{parentName:"tr",align:null},"Phase"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PreRender"),(0,l.kt)("td",{parentName:"tr",align:null},"PreRender")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PreAnimation"),(0,l.kt)("td",{parentName:"tr",align:null},"PreAnimation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PreSimulation"),(0,l.kt)("td",{parentName:"tr",align:null},"PreSimulation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"PostSimulation"),(0,l.kt)("td",{parentName:"tr",align:null},"PostSimulation")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"Heartbeat"),(0,l.kt)("td",{parentName:"tr",align:null},"Update")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local Planck = require("@packages/Planck")\nlocal Phase = Planck.Phase\n\nlocal PreRender = Phase.PreRender\nlocal PreAnimation = Phase.PreAnimation\nlocal PreSimulation = Phase.PreSimulation\nlocal PostSimulation = Phase.PostSimulation\nlocal Update = Phase.Update\n')),(0,l.kt)("h4",{id:"main"},"Main"),(0,l.kt)("p",null,"The Main Pipeline will run phases on the ",(0,l.kt)("inlineCode",{parentName:"p"},"RunService.Heartbeat")," event."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"First"),(0,l.kt)("li",{parentName:"ul"},"PreUpdate"),(0,l.kt)("li",{parentName:"ul"},"Update"),(0,l.kt)("li",{parentName:"ul"},"PostUpdate"),(0,l.kt)("li",{parentName:"ul"},"Last")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local Planck = require("@packages/Planck")\nlocal Phase = Planck.Phase\n\nlocal First = Phase.First\nlocal PreUpdate = Phase.PreUpdate\nlocal Update = Phase.Update\nlocal PostUpdate = Phase.PostUpdate\nlocal Last = Phase.Last\n')),(0,l.kt)("h3",{id:"systems"},"Systems"),(0,l.kt)("p",null,"A system is just a function, or it could be a system table."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},"local systemA = {\n    phase = myPhase,\n    system = function()\n        -- ...\n    end,\n}\n\nlocal function systemB()\n    -- ...\nend\n\nscheduler\n    :addSystems(systemA)\n    :addSystems(systemB, myPhase)\n")),(0,l.kt)("h3",{id:"the-scheduler"},"The Scheduler"),(0,l.kt)("p",null,"The Scheduler is where you initialize all your Pipelines, Phases, and Systems."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-lua"},'local Planck = require("@packages/Planck")\n\nlocal Phase = Planck.Phase\nlocal Pipeline = Planck.Pipeline\nlocal Scheduler = Planck.Scheduler\n\nlocal PreUpdate = Phase.new()\nlocal Update = Phase.new()\nlocal PostUpdate = Phase.new()\n\nlocal UpdatePipeline = Pipeline.new()\n    :insert(PreUpdate)\n    :insert(Update)\n    :insert(PostUpdate)\n\nlocal Render = Phase.new()\n\nlocal scheduler = scheduler.new(world)\n    :insert(UpdatePipeline, RunService, "Heartbeat")\n    :insertAfter(Render, UpdatePipeline)\n    :addSystems(systems, Update)\n\nscheduler:removeSystem(systemA)\nscheduler:replaceSystem(systemA, systemB)\n\nscheduler:editSystem(systemA, newPhase)\nscheduler:editSystem(systemA)\n\nscheduler:setRunCondition(systemA, function(world)\n    return someCondition and true or false\nend)\n')))}d.isMDXComponent=!0}}]);