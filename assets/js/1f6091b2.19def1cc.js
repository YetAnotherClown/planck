"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[710],{694:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"setup_guides/jecs","title":"Jecs","description":"Suggested setup guide for Jecs","source":"@site/docs/setup_guides/jecs.mdx","sourceDirName":"setup_guides","slug":"/setup_guides/jecs","permalink":"/planck/docs/setup_guides/jecs","draft":false,"unlisted":false,"editUrl":"https://github.com/YetAnotherClown/planck/edit/main/docs/setup_guides/jecs.mdx","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Jecs","description":"Suggested setup guide for Jecs","sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Matter","permalink":"/planck/docs/setup_guides/matter"},"next":{"title":"Plugins","permalink":"/planck/docs/plugins/"}}');var t=n(74848),l=n(28453);const a={title:"Jecs",description:"Suggested setup guide for Jecs",sidebar_position:2},c=void 0,i={},o=[{value:"Creating the World",id:"creating-the-world",level:3},{value:"Creating the Scheduler",id:"creating-the-scheduler",level:3},{value:"Making Components",id:"making-components",level:3},{value:"Creating Your First Systems",id:"creating-your-first-systems",level:3},{value:"Your Startup Function",id:"your-startup-function",level:3},{value:"Server / Client Scripts",id:"server--client-scripts",level:3},{value:"Credits",id:"credits",level:3}];function d(e){const r={a:"a",admonition:"admonition",code:"code",h3:"h3",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.admonition,{type:"note",children:(0,t.jsx)(r.p,{children:"This setup guide is only a suggestion, you can pick and choose which Plugins you use with Planck\r\nor how you use Planck and setup your project."})}),"\n",(0,t.jsx)(r.p,{children:"Recommended project structure"}),"\n",(0,t.jsxs)("pre",{style:{lineHeight:"120%",width:"fit-content","--ifm-paragraph-margin-bottom":0},children:[(0,t.jsx)(r.p,{children:"ReplicatedStorage/\r\n\u251c\u2500 Packages/\r\n\u2502  \u251c\u2500 Jabby.luau\r\n\u2502  \u251c\u2500 Jecs.luau\r\n\u2502  \u251c\u2500 Planck.luau\r\n\u2502  \u251c\u2500 PlanckJabby.luau\r\n\u251c\u2500 client/\r\n\u2502  \u251c\u2500 systems/\r\n\u251c\u2500 shared/\r\n\u2502  \u251c\u2500 systems/\r\n\u2502  \u251c\u2500 components.luau\r\n\u2502  \u251c\u2500 scheduler.luau\r\n\u2502  \u251c\u2500 startup.luau\r\n\u2502  \u251c\u2500 world.luau"}),(0,t.jsx)("br",{}),(0,t.jsx)(r.p,{children:"ServerScriptService/\r\n\u251c\u2500 server/\r\n\u2502  \u251c\u2500 systems/\r\n\u2502  \u251c\u2500 server.server.luau"}),(0,t.jsx)("br",{}),(0,t.jsx)(r.p,{children:"StarterPlayerScripts/\r\n\u251c\u2500 client.client.luau"})]}),"\n",(0,t.jsxs)(r.admonition,{type:"note",children:[(0,t.jsxs)(r.p,{children:["The versions for ",(0,t.jsx)(r.code,{children:"ukendio/jecs"})," and ",(0,t.jsx)(r.code,{children:"alicesaidhi/jabby"})," may not be the latest versions,\r\nonly the version used and confirmed to work with this setup guide."]}),(0,t.jsxs)(r.p,{children:["Check the respective repositories for ",(0,t.jsx)(r.a,{href:"https://github.com/Ukendio/jecs",children:"Jecs"})," and ",(0,t.jsx)(r.a,{href:"https://github.com/alicesaidhi/jabby",children:"Jabby"})," for updates."]})]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-toml",metastring:'title="wally.toml"',children:'[dependencies]\r\nJabby = "alicesaidhi/jabby@0.2.0-rc.8"\r\nJecs = "ukendio/jecs@0.5.3"\r\nPlanck = "yetanotherclown/planck@0.2.0-rc.2"\r\nPlanckJabby = "yetanotherclown/planck-jabby@0.2.0-rc.1"\r\nPlanckRunService = "yetanotherclown/planck-runservice@0.2.0-rc.1"\r\nMatterHooks = "yetanotherclown/planck-matter-hooks@0.2.0-rc.1"\n'})}),"\n",(0,t.jsx)(r.h3,{id:"creating-the-world",children:"Creating the World"}),"\n",(0,t.jsxs)(r.p,{children:["First, we'll create a module called ",(0,t.jsx)(r.code,{children:"world.luau"})," where we create and export our Jecs World."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'title="ReplicatedStorage/shared/world.luau"',children:'local Jecs = require("@packages/Jecs")\r\nlocal World = Jecs.World\r\n\r\nlocal world = World.new()\r\n\r\nreturn world\n'})}),"\n",(0,t.jsx)(r.h3,{id:"creating-the-scheduler",children:"Creating the Scheduler"}),"\n",(0,t.jsxs)(r.p,{children:["Next, we'll create a module called ",(0,t.jsx)(r.code,{children:"scheduler.luau"})," where we create and export our scheduler."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'title="ReplicatedStorage/shared/scheduler.luau"',children:'local Planck = require("@packages/Planck")\r\nlocal Scheduler = Planck.Scheduler\r\n\r\nlocal scheduler = Scheduler.new()\r\n\r\nreturn scheduler\n'})}),"\n",(0,t.jsx)(r.p,{children:"Then lets pass the world to our scheduler"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'{4,6}title="ReplicatedStorage/shared/scheduler.luau"',children:'local Planck = require("@packages/Planck")\r\nlocal Scheduler = Planck.Scheduler\r\n\r\nlocal world = require("@shared/world")\r\n\r\nlocal scheduler = Scheduler.new(world)\r\n\r\nreturn scheduler\n'})}),"\n",(0,t.jsx)(r.p,{children:"And then let's add the Jabby and RunService Plugins"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'{6,7,9,10,13,14} title="ReplicatedStorage/shared/scheduler.luau"',children:'local Planck = require("@packages/Planck")\r\nlocal Scheduler = Planck.Scheduler\r\n\r\nlocal world = require("@shared/world")\r\n\r\nlocal PlanckJabby = require("@packages/PlanckJabby")\r\nlocal jabbyPlugin = PlanckJabby.new()\r\n\r\nlocal PlanckRunService = require("@packages/PlanckRunService")\r\nlocal runServicePlugin = PlanckRunService.Plugin.new()\r\n\r\nlocal scheduler = Scheduler.new(world)\r\n    :addPlugin(jabbyPlugin)\r\n    :addPlugin(runServicePlugin)\r\n\r\nreturn scheduler\n'})}),"\n",(0,t.jsx)(r.p,{children:"This next part is up to preference, if you would like to use the Matter topoRuntime\r\nto run Matter Hooks with Jecs you can follow add the Matter Hooks Plugin too."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'{9,10,14} title="ReplicatedStorage/shared/scheduler.luau"',children:'local Planck = require("@packages/Planck")\r\nlocal Scheduler = Planck.Scheduler\r\n\r\nlocal world = require("@shared/world")\r\n\r\nlocal PlanckJabby = require("@packages/PlanckJabby")\r\nlocal jabbyPlugin = PlanckJabby.new()\r\n\r\nlocal MatterHooks = require("@packages/MatterHooks")\r\nlocal hooksPlugin = MatterHooks.new()\r\n\r\nlocal scheduler = Scheduler.new(world)\r\n    :addPlugin(jabbyPlugin)\r\n    :addPlugin(hooksPlugin)\r\n\r\nreturn scheduler\n'})}),"\n",(0,t.jsx)(r.h3,{id:"making-components",children:"Making Components"}),"\n",(0,t.jsxs)(r.p,{children:["We'll store our Jecs components in a ",(0,t.jsx)(r.code,{children:"components.luau"})," module."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'title="ReplicatedStorage/shared/components.luau"',children:'local world = require("@shared/world")\r\n\r\nreturn {\r\n    Name = world:component(),\r\n    Eats = world:component(),\r\n    Apples = world:component(),\r\n    Oranges = world:component(),\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"creating-your-first-systems",children:"Creating Your First Systems"}),"\n",(0,t.jsx)(r.p,{children:"Let's create a basic system with Planck + Jecs"}),"\n",(0,t.jsxs)(r.p,{children:["This system will setup our initial entities, hence it running on the ",(0,t.jsx)(r.code,{children:"Startup"})," phase."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'title="ReplicatedStorage/shared/systems/systemA.luau"',children:'local Jecs = require("@packages/Jecs")\r\nlocal pair = Jecs.pair\r\n\r\nlocal Planck = require("@packages/Planck")\r\nlocal Phase = Planck.Phase\r\n\r\nlocal components = require("@shared/components")\r\n\r\nlocal Name = components.Name\r\nlocal Eats = components.Eats\r\nlocal Apples = components.Apples\r\nlocal Oranges = components.Oranges\r\n\r\nlocal function systemA(world)\r\n    world:set(Apples, Name, "apples")\r\n    world:set(Oranges, Name, "oranges")\r\n\r\n    local bob = world:entity()\r\n    world:set(bob, pair(Eats, Apples), 10)\r\n    world:set(bob, pair(Eats, Oranges), 5)\r\n    world:set(bob, Name, "bob")\r\n\r\n    local alice = world:entity()\r\n    world:set(alice, pair(Eats, Apples), 4)\r\n    world:set(alice, Name, "alice")\r\nend\r\n\r\nreturn {\r\n    system = systemA\r\n    phase = Phase.Startup\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"This next system will query each frame and print out which entity eats what."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'title="ReplicatedStorage/shared/systems/systemB.luau"',children:'local Jecs = require("@packages/Jecs")\r\nlocal pair = Jecs.pair\r\n\r\nlocal Wildcard = Jecs.Wildcard\r\n\r\nlocal components = require("@shared/components")\r\n\r\nlocal Name = components.Name\r\nlocal Eats = components.Eats\r\n\r\nlocal function systemB(world)\r\n    for id, amount in world:query(pair(Eats, Wildcard)) do\r\n        local food = world:target(id, Eats)\r\n        local foodName = world:get(food, Name)\r\n        local entityName = world:get(id, Name)\r\n        \r\n        print(string.format("%s eats %d %s", entityName, amount, foodName))\r\n    end\r\nend\r\n\r\nreturn systemB\n'})}),"\n",(0,t.jsx)(r.p,{children:"Notice how you can define systems as either a function or a table!"}),"\n",(0,t.jsxs)(r.p,{children:["While you can set the phase directly in ",(0,t.jsx)(r.code,{children:"Scheduler:addSystem(fn, phase)"}),",\r\nit may be convenient to use a System Table instead."]}),"\n",(0,t.jsxs)(r.admonition,{type:"note",children:[(0,t.jsxs)(r.p,{children:["Notice how we pass ",(0,t.jsx)(r.code,{children:"world"})," into our system functions instead of requiring the\r\nmodule we made."]}),(0,t.jsx)(r.p,{children:"We do this to keep systems pure, we avoid external dependencies by passing our\r\ndependencies as function parameters. This makes our systems more testable and\r\nreusable."})]}),"\n",(0,t.jsx)(r.h3,{id:"your-startup-function",children:"Your Startup Function"}),"\n",(0,t.jsx)(r.p,{children:"Your Startup function is where you first require the world and scheduler modules,\r\nwhere you would add your systems to the scheduler, and where we will setup Jabby."}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'title="ReplicatedStorage/shared/startup.luau"',children:'local Jabby = require("@packages/Jabby")\r\n\r\nlocal scheduler = require("@shared/scheduler")\r\nlocal world = require("@shared/world")\r\n\r\nreturn function(systems)\r\n    if #systems ~= 0 then\r\n        scheduler:addSystems(systems) -- Assuming you\'re using SystemTables!\r\n    end\r\n\r\n    if RunService:IsClient() then\r\n\t\tlocal client = Jabby.obtain_client()\r\n\r\n\t\tlocal function createWidget(_, state: Enum.UserInputState)\r\n\t\t\tif state ~= Enum.UserInputState.Begin then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\r\n\t\t\tclient.spawn_app(client.apps.home, nil)\r\n\t\tend\r\n\r\n\t\tContextActionService:BindAction("Open Jabby", createWidget, false, Enum.KeyCode.F4)\r\n\tend\r\n\r\n    Jabby.register({\r\n        applet = Jabby.applets.world,\r\n        name = "Jecs World",\r\n        configuration = {\r\n            world = world\r\n        }\r\n    })\r\nend\n'})}),"\n",(0,t.jsx)(r.h3,{id:"server--client-scripts",children:"Server / Client Scripts"}),"\n",(0,t.jsxs)(r.p,{children:["On the client, we'll add the ",(0,t.jsx)(r.code,{children:"shared"})," and ",(0,t.jsx)(r.code,{children:"client"})," systems."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'title="ReplicatedStorage/client/client.client.luau"',children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\r\n\r\nlocal startup = require("@shared/startup")\r\n\r\nlocal systems = {}\r\n\r\nlocal function addSystems(folder)\r\n    for _, system in folder:GetChildren() do\r\n        if not system:IsA("ModuleScript") then\r\n            continue\r\n        end\r\n\r\n        table.insert(systems, require(system))\r\n    end\r\nend\r\n\r\naddSystems(ReplicatedStorage.shared.systems)\r\naddSystems(ReplicatedStorage.client.systems)\r\n\r\nstartup(systems)\n'})}),"\n",(0,t.jsxs)(r.p,{children:["On the server, we'll instead add the ",(0,t.jsx)(r.code,{children:"server"})," systems."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",metastring:'{18} title="ServerScriptService/server/server.server.luau"',children:'local ReplicatedStorage = game:GetService("ReplicatedStorage")\r\n\r\nlocal startup = require("@shared/startup")\r\n\r\nlocal systems = {}\r\n\r\nlocal function addSystems(folder)\r\n    for _, system in folder:GetChildren() do\r\n        if not system:IsA("ModuleScript") then\r\n            continue\r\n        end\r\n\r\n        table.insert(systems, require(system))\r\n    end\r\nend\r\n\r\naddSystems(ReplicatedStorage.shared.systems)\r\naddSystems(ReplicatedStorage.server.systems)\r\n\r\nstartup(systems)\n'})}),"\n",(0,t.jsx)(r.h3,{id:"credits",children:"Credits"}),"\n",(0,t.jsx)(r.p,{children:"This setup guide was heavily influenced by official Jecs examples and documentation."})]})}function u(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var s=n(96540);const t={},l=s.createContext(t);function a(e){const r=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(l.Provider,{value:r},e.children)}}}]);