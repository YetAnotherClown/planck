"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[328],{77433:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"getting_started/phases","title":"Phases","description":"An introduction to Phases in Planck","source":"@site/docs/getting_started/phases.md","sourceDirName":"getting_started","slug":"/getting_started/phases","permalink":"/planck/docs/getting_started/phases","draft":false,"unlisted":false,"editUrl":"https://github.com/YetAnotherClown/planck/edit/main/docs/getting_started/phases.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Phases","description":"An introduction to Phases in Planck","sidebar_position":4},"sidebar":"defaultSidebar","previous":{"title":"Systems","permalink":"/planck/docs/getting_started/systems"},"next":{"title":"Order of Execution","permalink":"/planck/docs/getting_started/order"}}');var t=s(74848),i=s(28453);const r={title:"Phases",description:"An introduction to Phases in Planck",sidebar_position:4},l="Phases",c={},o=[{value:"Built-in Phases",id:"built-in-phases",level:2},{value:"Startup Phases",id:"startup-phases",level:3},{value:"RunService Phases Plugin",id:"runservice-phases-plugin",level:2},{value:"Installation",id:"installation",level:3},{value:"Pipelines",id:"pipelines",level:3},{value:"Phases",id:"phases-1",level:3},{value:"More Update Phases",id:"more-update-phases",level:3},{value:"What&#39;s Next?",id:"whats-next",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"phases",children:"Phases"})}),"\n",(0,t.jsxs)(n.p,{children:["In Roblox, you might be familiar with the ",(0,t.jsx)(n.a,{href:"https://create.roblox.com/docs/reference/engine/classes/RunService",children:"RunService"}),". You can think of events\r\nlike ",(0,t.jsx)(n.code,{children:"Heartbeat"}),", ",(0,t.jsx)(n.code,{children:"PreRender"}),", or ",(0,t.jsx)(n.code,{children:"PostSimulation"})," as Phases."]}),"\n",(0,t.jsx)(n.p,{children:"All a Phase is, is a sync point within the execution of a frame. You can see\r\nthe order of execution of a frame in Roblox in this image."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{src:"https://prod.docsiteassets.roblox.com/assets/optimization/task-scheduler/scheduler-priority.png.webp",alt:"Task Scheduler Priority"})}),"\n",(0,t.jsx)(n.p,{children:"The 'Events' shown in this image represent the different sync points, or\r\nPhases that Roblox provides in a frame, all being ran in an explicit order."}),"\n",(0,t.jsx)(n.p,{children:"In Planck, we represent Phases as an Object which you can assign to\r\nSystems. You can create, insert, and add a Phase to a system like so,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",metastring:'title="scheduler.luau"',children:'local Planck = require("@packages/Planck")\r\nlocal Scheduler = Planck.Scheduler\r\nlocal Phase = Planck.Phase\r\n\r\n-- ...\r\n\r\nlocal systemA = require("@shared/systems/systemA")\r\n\r\nlocal myPhase = Phase.new("myPhase")\r\n\r\nlocal scheduler = Scheduler.new(world, state)\r\n    :insert(myPhase)\r\n    :addSystem(systemA, myPhase)\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Remember SystemTables? Instead of setting the phase in ",(0,t.jsx)(n.code,{children:"addSystem"}),", you can\r\nadd it to your SystemTable and the system will be added to that Phase."]})}),"\n",(0,t.jsx)(n.p,{children:"We can also assign Phases to Events and Signals."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",metastring:'{8} title="scheduler.luau"',children:'-- ...\r\n\r\nlocal systemA = require("@shared/systems/systemA")\r\n\r\nlocal myPhase = Phase.new("myPhase")\r\n\r\nlocal scheduler = Scheduler.new(world, state)\r\n    :insert(myPhase, RunService, "Heartbeat")\r\n    :addSystem(systemA, myPhase)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"built-in-phases",children:"Built-in Phases"}),"\n",(0,t.jsx)(n.p,{children:"Planck provides built-in Phases like Startup Phases and also provides a Plugin\r\nfor Roblox RunService that adds Pipelines and Phases for each RunService Event."}),"\n",(0,t.jsx)(n.p,{children:"While you're just getting started, it is suggested that you use these built-in\r\nphases for now. You will learn about deciding to make a Phase (and Pipelines)\r\nlater."}),"\n",(0,t.jsx)(n.h3,{id:"startup-phases",children:"Startup Phases"}),"\n",(0,t.jsx)(n.p,{children:"Startup Phases are a special kind of Phase. Planck will only run these\r\nsystems once, and before any other system is ran."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"PreStartup"}),"\n",(0,t.jsx)(n.li,{children:"Startup"}),"\n",(0,t.jsx)(n.li,{children:"PostStartup"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local Planck = require("@packages/Planck")\r\nlocal Phase = Planck.Phase\r\n\r\nlocal PreStartup = Phase.PreStartup\r\nlocal Startup = Phase.Startup\r\nlocal PostStartup = Phase.PostStartup\n'})}),"\n",(0,t.jsx)(n.p,{children:"These Phases are useful for initialization work that you need to do once,\r\nand before you start your game loop."}),"\n",(0,t.jsx)(n.h2,{id:"runservice-phases-plugin",children:"RunService Phases Plugin"}),"\n",(0,t.jsx)(n.p,{children:"Planck provides a plugin that adds built-in Phases and Pipelines for each\r\nRunService event."}),"\n",(0,t.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"With Wally,"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-toml",children:'[dependencies]\r\nPlanckRunService = "yetanotherclown/planck-runservice@0.2.0-rc.1"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"pipelines",children:"Pipelines"}),"\n",(0,t.jsx)(n.p,{children:"Each RunService Event is now it's own Pipeline,"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"PreRender"}),"\n",(0,t.jsx)(n.li,{children:"PreAnimation"}),"\n",(0,t.jsx)(n.li,{children:"PreSimulation"}),"\n",(0,t.jsx)(n.li,{children:"PostSimulation"}),"\n",(0,t.jsx)(n.li,{children:"Heartbeat"}),"\n"]}),"\n",(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.p,{children:"You might be more familiar with the old names for some of these events."}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PreRender"})," is equivalent to ",(0,t.jsx)(n.code,{children:"RenderStepped"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PreSimulation"})," is equivalent to ",(0,t.jsx)(n.code,{children:"Stepped"})]}),"\n"]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local PlanckRunService = require("@packages/PlanckRunService")\r\n\r\nlocal Pipelines = PlanckRunService.Pipelines\r\n\r\nlocal PreRender = Pipelines.PreRender\r\nlocal PreAnimation = Pipelines.PreAnimation\r\nlocal PreSimulation = Pipelines.PreSimulation\r\nlocal PostSimulation = Pipelines.PostSimulation\r\nlocal Heartbeat = Pipelines.Heartbeat\n'})}),"\n",(0,t.jsx)(n.h3,{id:"phases-1",children:"Phases"}),"\n",(0,t.jsxs)(n.p,{children:["And it's own Phase, with the exception of ",(0,t.jsx)(n.code,{children:"Heartbeat"})," which has many Phases."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Event"}),(0,t.jsx)(n.th,{children:"Phase"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PreRender"}),(0,t.jsx)(n.td,{children:"PreRender"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PreAnimation"}),(0,t.jsx)(n.td,{children:"PreAnimation"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PreSimulation"}),(0,t.jsx)(n.td,{children:"PreSimulation"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"PostSimulation"}),(0,t.jsx)(n.td,{children:"PostSimulation"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Heartbeat"}),(0,t.jsx)(n.td,{children:"Update"})]})]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local PlanckRunService = require("@packages/PlanckRunService")\r\n\r\nlocal Phases = PlanckRunService.Phases\r\n\r\nlocal PreRender = Phases.PreRender\r\nlocal PreAnimation = Phases.PreAnimation\r\nlocal PreSimulation = Phases.PreSimulation\r\nlocal PostSimulation = Phases.PostSimulation\r\nlocal Update = Phases.Update\n'})}),"\n",(0,t.jsx)(n.h3,{id:"more-update-phases",children:"More Update Phases"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"RunService.Heartbeat"})," isn't just a single Phase, instead its composed of\r\nmany Phases. This is because the Update Phases are where most of your\r\ngame's logic will run on, so we believe it's important that you can\r\nexpress the order of execution easily right out of the box."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"First"}),"\n",(0,t.jsx)(n.li,{children:"PreUpdate"}),"\n",(0,t.jsx)(n.li,{children:"Update"}),"\n",(0,t.jsx)(n.li,{children:"PostUpdate"}),"\n",(0,t.jsx)(n.li,{children:"Last"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-lua",children:'local PlanckRunService = require("@packages/PlanckRunService")\r\n\r\nlocal Phases = PlanckRunService.Phases\r\n\r\nlocal First = Phases.First\r\nlocal PreUpdate = Phases.PreUpdate\r\nlocal Update = Phases.Update\r\nlocal PostUpdate = Phases.PostUpdate\r\nlocal Last = Phases.Last\n'})}),"\n",(0,t.jsx)(n.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,t.jsx)(n.p,{children:"Now that we know about Phases, it's time to learn how to explicitly define\r\nour order of execution."}),"\n",(0,t.jsxs)(n.p,{children:["\u2192 ",(0,t.jsx)(n.a,{href:"/planck/docs/getting_started/order",children:"The Order of Execution"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>l});var a=s(96540);const t={},i=a.createContext(t);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);