"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[82],{42463:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"getting_started/systems","title":"Systems","description":"The basics of Systems","source":"@site/docs/getting_started/systems.md","sourceDirName":"getting_started","slug":"/getting_started/systems","permalink":"/planck/docs/getting_started/systems","draft":false,"unlisted":false,"editUrl":"https://github.com/YetAnotherClown/planck/edit/main/docs/getting_started/systems.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Systems","description":"The basics of Systems","sidebar_position":3},"sidebar":"defaultSidebar","previous":{"title":"The Scheduler","permalink":"/planck/docs/getting_started/scheduler"},"next":{"title":"Phases","permalink":"/planck/docs/getting_started/phases"}}');var r=t(74848),a=t(28453);const l={title:"Systems",description:"The basics of Systems",sidebar_position:3},i="Systems",o={},d=[{value:"System Tables",id:"system-tables",level:3},{value:"System Sets",id:"system-sets",level:3},{value:"What&#39;s Next?",id:"whats-next",level:2}];function c(e){const s={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"systems",children:"Systems"})}),"\n",(0,r.jsx)(s.p,{children:"Systems, at their very core, are functions that are designed to be execution on a certain event or on a loop."}),"\n",(0,r.jsxs)(s.p,{children:["When working with ECS on Roblox, typically you will have most of your systems running on the ",(0,r.jsx)(s.a,{href:"https://create.roblox.com/docs/reference/engine/classes/RunService#Heartbeat",children:"RunService.Heartbeat"})," event.\r\nThis will run your systems every ",(0,r.jsx)(s.em,{children:"frame"}),", on the ",(0,r.jsx)(s.code,{children:"Heartbeat"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"We will go over running systems on events later on. For now, let's see\r\nhow we create and add systems to the Scheduler."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",metastring:'title="systemA.luau"',children:"local function systemA()\r\n    -- ...\r\nend\r\n\r\nreturn systemA\n"})}),"\n",(0,r.jsx)(s.p,{children:"This is how systems are typically made: a single function inside of a\r\nModuleScript."}),"\n",(0,r.jsx)(s.p,{children:"To add this to our Scheduler, we can do:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",metastring:'title="scheduler.luau"',children:'-- ...\r\n\r\nlocal systemA = require("@shared/systems/systemA")\r\n\r\nlocal scheduler = Scheduler.new(world, state)\r\n    :addSystem(systemA)\n'})}),"\n",(0,r.jsx)(s.p,{children:"Remember how we also passed state into the Scheduler to our Systems?\r\nThis will be passed directly into the parameters of our systems."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",metastring:'{1} title="systemA.luau"',children:"local function systemA(world, state)\r\n    -- ...\r\nend\r\n\r\nreturn systemA\n"})}),"\n",(0,r.jsx)(s.h3,{id:"system-tables",children:"System Tables"}),"\n",(0,r.jsx)(s.p,{children:"Another way you can define a System is with a SystemTable."}),"\n",(0,r.jsxs)(s.p,{children:["SystemTables contain not only the ",(0,r.jsx)(s.em,{children:"function"})," but can also contain a Phase,\r\nName, and Run Condition for Systems."]}),"\n",(0,r.jsxs)(s.table,{children:[(0,r.jsx)(s.thead,{children:(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.th,{children:"Field"}),(0,r.jsx)(s.th,{children:"Type"}),(0,r.jsx)(s.th,{})]})}),(0,r.jsxs)(s.tbody,{children:[(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"name"}),(0,r.jsx)(s.td,{children:"string"}),(0,r.jsx)(s.td,{children:"Optional"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"system"}),(0,r.jsx)(s.td,{children:"function"}),(0,r.jsx)(s.td,{children:(0,r.jsx)(s.strong,{children:"Required"})})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"phase"}),(0,r.jsx)(s.td,{children:"Phase"}),(0,r.jsx)(s.td,{children:"Optional"})]}),(0,r.jsxs)(s.tr,{children:[(0,r.jsx)(s.td,{children:"runConditions"}),(0,r.jsx)(s.td,{children:"{ (...any) -> boolean }"}),(0,r.jsx)(s.td,{children:"Optional"})]})]})]}),"\n",(0,r.jsx)(s.p,{children:"The Name is used for debugging and used in tooling such as Jabby to help you identify systems, this is automatically inferred from the function name, so it's completely optional."}),"\n",(0,r.jsx)(s.p,{children:"Don't worry about what a Phase or Run Condition is for now, we will explain these later."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",metastring:'title="systemA.luau"',children:'local function systemA(world, state)\r\n    -- ...\r\nend\r\n\r\nlocal function condition(world, state)\r\n    if someCondition then\r\n        return true\r\n    else\r\n        return false\r\n    end\r\nend\r\n\r\nreturn {\r\n    name = "systemA",\r\n    system = systemA,\r\n    phase = Planck.Phase.PreUpdate,\r\n    runConditions = { condition }\r\n}\n'})}),"\n",(0,r.jsx)(s.p,{children:"And then we can add this the same way as the first example,"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",metastring:'title="scheduler.luau"',children:'-- ...\r\n\r\nlocal systemA = require("@shared/systems/systemA")\r\n\r\nlocal scheduler = Scheduler.new(world, state)\r\n    :addSystem(systemA)\n'})}),"\n",(0,r.jsx)(s.h3,{id:"system-sets",children:"System Sets"}),"\n",(0,r.jsx)(s.p,{children:"You can also create a set, or rather an array of Systems. These can either\r\nbe functions or SystemTables. You can even mix the two in a System Set."}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-lua",children:'-- ...\r\n\r\nlocal systemA = require("@shared/systems/systemA")\r\nlocal systemB = require("@shared/systems/systemB")\r\n\r\nlocal systemSet = { systemA, systemB }\r\n\r\nlocal scheduler = Scheduler.new(world, state)\r\n    :addSystems(systemSet)\n'})}),"\n",(0,r.jsx)(s.p,{children:"This allows us to bulk add systems to the Scheduler. When we learn about Phases, this will also allow us to bulk set what phase these systems run on."}),"\n",(0,r.jsx)(s.h2,{id:"whats-next",children:"What's Next?"}),"\n",(0,r.jsx)(s.p,{children:"Now that we have systems, we should learn how to properly manage their order\r\nof execution. This is where Phases come in."}),"\n",(0,r.jsxs)(s.p,{children:["\u2192 ",(0,r.jsx)(s.a,{href:"/planck/docs/getting_started/phases",children:"Phases"})]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>l,x:()=>i});var n=t(96540);const r={},a=n.createContext(r);function l(e){const s=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(a.Provider,{value:s},e.children)}}}]);