{"searchDocs":[{"title":"Pipeline","type":0,"sectionRef":"#","url":"/planck/api/Pipeline","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#properties","content":" ","version":null,"tagName":"h2"},{"title":"Startup​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#Startup","content":"&lt;/&gt; Pipeline.Startup: Pipeline A Pipeline containing the PreStartup, Startup, and PostStartup phases.  ","version":null,"tagName":"h3"},{"title":"Main​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#Main","content":"&lt;/&gt; Pipeline.Main: Pipeline A Pipeline containing the First, PreUpdate, Update, PostUpdate, and Last phases. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#new","content":"&lt;/&gt; Pipeline.new(name: string?) → () Creates a new Pipeline, with an optional name to use for debugging. When no name is provided, the script and line number will be used.  ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#insert","content":"&lt;/&gt; Pipeline:insert(phase: Phase) → Pipeline Adds a Phase to the Pipeline, ordering it implicitly.  ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#insert","content":"&lt;/&gt; Pipeline:insert( phase: Phase, after: Phase ) → Pipeline Adds a Phase to the Pipeline after another Phase, ordering it explicitly. ","version":null,"tagName":"h3"},{"title":"Phase","type":0,"sectionRef":"#","url":"/planck/api/Phase","content":"","keywords":"","version":null},{"title":"Properties​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#properties","content":" ","version":null,"tagName":"h2"},{"title":"PreStartup​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreStartup","content":"&lt;/&gt; Phase.PreStartup: Phase Runs before the Startup Phase.  ","version":null,"tagName":"h3"},{"title":"Startup​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#Startup","content":"&lt;/&gt; Phase.Startup: Phase This Phase will run once, the first time the Scheduler is ran, before any other Phases are ran.  ","version":null,"tagName":"h3"},{"title":"PostStartup​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PostStartup","content":"&lt;/&gt; Phase.PostStartup: Phase Runs after the Startup phase.  ","version":null,"tagName":"h3"},{"title":"PreRender​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreRender","content":"&lt;/&gt; Phase.PreRender: Phase Runs on the RunService.PreRender Event.  ","version":null,"tagName":"h3"},{"title":"PreAnimation​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreAnimation","content":"&lt;/&gt; Phase.PreAnimation: Phase Runs on the RunService.PreAnimation Event.  ","version":null,"tagName":"h3"},{"title":"PreSimulation​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreSimulation","content":"&lt;/&gt; Phase.PreSimulation: Phase Runs on the RunService.PreSimulation Event.  ","version":null,"tagName":"h3"},{"title":"PostSimulation​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PostSimulation","content":"&lt;/&gt; Phase.PostSimulation: Phase Runs on the RunService.PostSimulation Event.  ","version":null,"tagName":"h3"},{"title":"First​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#First","content":"&lt;/&gt; Phase.First: Phase Will always run first on the RunService.Heartbeat Event.  ","version":null,"tagName":"h3"},{"title":"PreUpdate​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreUpdate","content":"&lt;/&gt; Phase.PreUpdate: Phase Runs before the Update Phase.  ","version":null,"tagName":"h3"},{"title":"Update​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#Update","content":"&lt;/&gt; Phase.Update: Phase Runs on the RunService.Heartbeat Event. This is the default Phase systems will run on.  ","version":null,"tagName":"h3"},{"title":"PostUpdate​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PostUpdate","content":"&lt;/&gt; Phase.PostUpdate: Phase Runs after the Update Phase.  ","version":null,"tagName":"h3"},{"title":"Last​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#Last","content":"&lt;/&gt; Phase.Last: Phase Will always run last on the RunService.Heartbeat Event. ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#new","content":"&lt;/&gt; Phase.new(name: string?) → () Creates a new Phase, with an optional name to use for debugging. When no name is provided, the script and line number will be used. ","version":null,"tagName":"h3"},{"title":"Jabby","type":0,"sectionRef":"#","url":"/planck/docs/plugins/jabby","content":"Jabby Jabby, by alicesaidhi, is a Debugger developed for Jecs, an ECS library by Ukendio. This Plugin handles all setup to add the Planck Scheduler to Jabby. You can install it with, [dependencies] PlanckJabby = &quot;yetanotherclown/planck-jabby@0.1.0-rc.1&quot; Then to set it up, local Planck = require(&quot;@packages/Planck&quot;) local Scheduler = Planck.Scheduler local PlanckJabby = require(&quot;@packages/PlanckJabby&quot;) local jabbyPlugin = PlanckJabby.new() local scheduler = scheduler.new() :addPlugin(jabbyPlugin) This only adds the Scheduler to Jabby, you'll have to add the World and other setup yourself.","keywords":"","version":"Next"},{"title":"Scheduler","type":0,"sectionRef":"#","url":"/planck/api/Scheduler","content":"","keywords":"","version":null},{"title":"Types​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#types","content":" ","version":null,"tagName":"h2"},{"title":"SystemFn​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#SystemFn","content":"&lt;/&gt; type SystemFn = ((U...) → any)   ","version":null,"tagName":"h3"},{"title":"SystemTable​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#SystemTable","content":"&lt;/&gt; interface SystemTable { system: SystemFn&lt;U...&gt; phase: Phase? [any]: any }   ","version":null,"tagName":"h3"},{"title":"System​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#System","content":"&lt;/&gt; type System = SystemFn&lt;U...&gt; | SystemTable&lt;U...&gt;  ","version":null,"tagName":"h3"},{"title":"Functions​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#functions","content":" ","version":null,"tagName":"h2"},{"title":"new​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#new","content":"&lt;/&gt; Scheduler.new(args: U...) → () Creates a new Scheduler, the args passed will be passed to any System anytime it is ran by the Scheduler.  ","version":null,"tagName":"h3"},{"title":"addPlugin​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#addPlugin","content":"&lt;/&gt; Scheduler:addPlugin(plugin: PlanckPlugin) → () Initializes a plugin with the scheduler, see the Plugin Docs for more information.  ","version":null,"tagName":"h3"},{"title":"run​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#run","content":"&lt;/&gt; Scheduler:run(phase: Phase) → Scheduler Runs all Systems tagged with the Phase in order.  ","version":null,"tagName":"h3"},{"title":"run​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#run","content":"&lt;/&gt; Scheduler:run(pipeline: Pipeline) → Scheduler Runs all Systems tagged with any Phase within the Pipeline in order.  ","version":null,"tagName":"h3"},{"title":"run​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#run","content":"&lt;/&gt; Scheduler:run(system: System) → Scheduler Runs the System, passing in the arguments of the Scheduler, U....  ","version":null,"tagName":"h3"},{"title":"runAll​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#runAll","content":"&lt;/&gt; Scheduler:runAll() → Scheduler Runs all Systems within order.  ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insert","content":"&lt;/&gt; Scheduler:insert(phase: Phase) → Scheduler Initializes the Phase within the Scheduler, ordering it implicitly.  ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insert","content":"&lt;/&gt; Scheduler:insert(pipeline: Pipeline) → Scheduler Initializes all Phases within the Pipeline within the Scheduler, ordering the Pipeline implicitly.  ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insert","content":"&lt;/&gt; Scheduler:insert( phase: Phase, instance: Instance | EventLike, event: string | EventLike ) → Scheduler Initializes the Phase within the Scheduler, ordering it implicitly and scheduling it to be ran on the specified event. local myScheduler = Scheduler.new() :insert(myPhase, RunService, &quot;Heartbeat&quot;)   ","version":null,"tagName":"h3"},{"title":"insert​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insert","content":"&lt;/&gt; Scheduler:insert( pipeline: Pipeline, instance: Instance | EventLike, event: string | EventLike ) → Scheduler Initializes all Phases within the Pipeline within the Scheduler, ordering the Pipeline implicitly and scheduling it to be ran on the specified event. local myScheduler = Scheduler.new() :insert(myPipeline, RunService, &quot;Heartbeat&quot;)   ","version":null,"tagName":"h3"},{"title":"insertAfter​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insertAfter","content":"&lt;/&gt; Scheduler:insertAfter( phase: Phase, after: Phase | Pipeline ) → Scheduler Initializes the Phase within the Scheduler, ordering it explicitly after the Phase, or adding to the end of the Pipeline provided.  ","version":null,"tagName":"h3"},{"title":"insertAfter​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insertAfter","content":"&lt;/&gt; Scheduler:insertAfter( pipeline: Pipeline, after: Phase | Pipeline ) → Scheduler Initializes all Phases within the Pipeline within the Scheduler, ordering the Pipeline explicitly after the Phase, or adding to the end of the Pipeline provided.  ","version":null,"tagName":"h3"},{"title":"addSystems​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#addSystems","content":"&lt;/&gt; Scheduler:addSystems( systems: System, phase: Phase? ) → () Adds the System to the Scheduler, scheduling it to be ran implicitly within the provided Phase or on the default Main phase.  ","version":null,"tagName":"h3"},{"title":"addSystems​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#addSystems","content":"&lt;/&gt; Scheduler:addSystems( systems: {System}, phase: Phase? ) → () Adds the Systems to the Scheduler, scheduling them to be ran implicitly within the provided Phase or on the default Main phase.  ","version":null,"tagName":"h3"},{"title":"editSystem​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#editSystem","content":"&lt;/&gt; Scheduler:editSystem( system: System, newPhase: Phase ) → () Changes the Phase that this system is scheduled on.  ","version":null,"tagName":"h3"},{"title":"removeSystem​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#removeSystem","content":"&lt;/&gt; Scheduler:removeSystem(system: System) → () Removes the System from the Scheduler.  ","version":null,"tagName":"h3"},{"title":"replaceSystem​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#replaceSystem","content":"&lt;/&gt; Scheduler:replaceSystem( old: System, new: System ) → () Replaces the System with a new System.  ","version":null,"tagName":"h3"},{"title":"setRunCondition​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#setRunCondition","content":"&lt;/&gt; Scheduler:setRunCondition( system: System, fn: (U...) → boolean ) → () Adds a Run Condition which the Scheduler will check before this System is ran.  ","version":null,"tagName":"h3"},{"title":"setRunCondition​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#setRunCondition","content":"&lt;/&gt; Scheduler:setRunCondition( phase: Phase, fn: (U...) → boolean ) → () Adds a Run Condition which the Scheduler will check before any Systems tagged with this Phase are ran.  ","version":null,"tagName":"h3"},{"title":"setRunCondition​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#setRunCondition","content":"&lt;/&gt; Scheduler:setRunCondition( pipeline: Pipeline, fn: (U...) → boolean ) → () Adds a Run Condition which the Scheduler will check before any Systems within any Phases apart of this Pipeline are ran. This Run Condition will be applied to the Phases themselves. ","version":null,"tagName":"h3"},{"title":"Plugins","type":0,"sectionRef":"#","url":"/planck/docs/plugins/","content":"","keywords":"","version":"Next"},{"title":"Provided Plugins​","type":1,"pageTitle":"Plugins","url":"/planck/docs/plugins/#provided-plugins","content":" ","version":"Next","tagName":"h2"},{"title":"Matter Hooks​","type":1,"pageTitle":"Plugins","url":"/planck/docs/plugins/#matter-hooks","content":" The Matter Hooks plugin provides a way to use the Matter topoRuntime to use any hook made for Matter.  note This must be installed and added to the Scheduler to still use Hooks with Matter.  See the Matter Hooks page.  ","version":"Next","tagName":"h3"},{"title":"Matter Debugger​","type":1,"pageTitle":"Plugins","url":"/planck/docs/plugins/#matter-debugger","content":" Matter provides a built-in Debugger, this plugin adds support for Plank.  See the Matter Debugger page.  ","version":"Next","tagName":"h3"},{"title":"Jabby​","type":1,"pageTitle":"Plugins","url":"/planck/docs/plugins/#jabby","content":" Jabby is a Debugger for Jecs by Ukendio. This Plugin handles all setup to add the Planck Scheduler to Jabby.  See the Jabby page.  ","version":"Next","tagName":"h3"},{"title":"Creating Plugins​","type":1,"pageTitle":"Plugins","url":"/planck/docs/plugins/#creating-plugins","content":" danger The API behind Plugins is currently unstable. The Plugins API will continue to be undocumented until it is stable. If you want to create a Plugin, see the two provided Plugin's source code, and be warned. ","version":"Next","tagName":"h2"},{"title":"Matter Debugger","type":0,"sectionRef":"#","url":"/planck/docs/plugins/matter_debugger","content":"Matter Debugger The Matter Debugger plugin provides support for Planck within the Matter debugger. You can install it with, [dependencies] DebuggerPlugin = &quot;yetanotherclown/planck-matter-debugger@0.1.0-rc.1&quot; Then to set it up, local Planck = require(&quot;@packages/Planck&quot;) local Scheduler = Planck.Scheduler local DebuggerPlugin = require(&quot;@packages/DebuggerPlugin&quot;) local debuggerPlugin = DebuggerPlugin.new() local scheduler = scheduler.new() :addPlugin(debuggerPlugin) ","keywords":"","version":"Next"},{"title":"Matter Hooks","type":0,"sectionRef":"#","url":"/planck/docs/plugins/matter_hooks","content":"","keywords":"","version":"Next"},{"title":"Using with Matter​","type":1,"pageTitle":"Matter Hooks","url":"/planck/docs/plugins/matter_hooks#using-with-matter","content":" To use Matter's Hooks in Matter, you still need to use this Plugin.  By default, the Plugin will look for the official Matter library in ReplicatedStorage/Packages/_Index. This should work if you're installing from Wally. If you're not, you can pass in a reference to the Matter library in the Plugin constructor.  local hooksPlugin = MatterHooks.new(ReplicatedStorage.Matter) local scheduler = scheduler.new() :addPlugin(hooksPlugin)  ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/planck/docs/intro","content":"","keywords":"","version":"Next"},{"title":"Installation​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#installation","content":" You can install Planck with Wally  [dependencies] Planck = &quot;yetanotherclown/planck@0.1.0-rc.1&quot;   ","version":"Next","tagName":"h2"},{"title":"The Basics​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#the-basics","content":" ","version":"Next","tagName":"h2"},{"title":"Phases​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#phases","content":" A Phase is just a tag you can assign to your systems, it's a way to order systems as a group.  local myPhase = Phase.new(&quot;debugName&quot;) scheduler :insert(myPhase, RunService, &quot;Heartbeat&quot;) :addSystems(systemA, myPhase)   ","version":"Next","tagName":"h3"},{"title":"Pipelines​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#pipelines","content":" A Pipeline is a group of ordered phases. Each phase will run in the fixed order to which each Phase was passed to it.  local myPipeline = Pipeline.new() :insert(phaseA) :insert(phaseB) :insert(phaseC) scheduler :insert(myPipeline, RunService, &quot;Heartbeat&quot;)   ","version":"Next","tagName":"h3"},{"title":"Built-in Pipelines & Phases​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#built-in-pipelines--phases","content":" Startup​  Systems on these phases will run exactly once, before any other phase runs.  PreStartupStartupPostStartup  local Planck = require(&quot;@packages/Planck&quot;) local Phase = Planck.Phase local PreStartup = Phase.PreStartup local Startup = Phase.Startup local PostStartup = Phase.PostStartup   Engine Events​  These Phases are ran on Engine RunService Events, events are ran in the order listed.  Event\tPhasePreRender\tPreRender PreAnimation\tPreAnimation PreSimulation\tPreSimulation PostSimulation\tPostSimulation Heartbeat\tUpdate  local Planck = require(&quot;@packages/Planck&quot;) local Phase = Planck.Phase local PreRender = Phase.PreRender local PreAnimation = Phase.PreAnimation local PreSimulation = Phase.PreSimulation local PostSimulation = Phase.PostSimulation local Update = Phase.Update   Main​  The Main Pipeline will run phases on the RunService.Heartbeat event.  FirstPreUpdateUpdatePostUpdateLast  local Planck = require(&quot;@packages/Planck&quot;) local Phase = Planck.Phase local First = Phase.First local PreUpdate = Phase.PreUpdate local Update = Phase.Update local PostUpdate = Phase.PostUpdate local Last = Phase.Last   ","version":"Next","tagName":"h3"},{"title":"Systems​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#systems","content":" A system is just a function, or it could be a system table.  local systemA = { phase = myPhase, system = function() -- ... end, } local function systemB() -- ... end scheduler :addSystems(systemA) :addSystems(systemB, myPhase)   ","version":"Next","tagName":"h3"},{"title":"The Scheduler​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#the-scheduler","content":" The Scheduler is where you initialize all your Pipelines, Phases, and Systems.  local Planck = require(&quot;@packages/Planck&quot;) local Phase = Planck.Phase local Pipeline = Planck.Pipeline local Scheduler = Planck.Scheduler local PreUpdate = Phase.new() local Update = Phase.new() local PostUpdate = Phase.new() local UpdatePipeline = Pipeline.new() :insert(PreUpdate) :insert(Update) :insert(PostUpdate) local Render = Phase.new() local scheduler = scheduler.new(world) :insert(UpdatePipeline, RunService, &quot;Heartbeat&quot;) :insertAfter(Render, UpdatePipeline) :addSystems(systems, Update) scheduler:removeSystem(systemA) scheduler:replaceSystem(systemA, systemB) scheduler:editSystem(systemA, newPhase) scheduler:editSystem(systemA) scheduler:setRunCondition(systemA, function(world) return someCondition and true or false end)  ","version":"Next","tagName":"h3"}],"options":{"id":"default"}}