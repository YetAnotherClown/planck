[{"title":"Pipeline","type":0,"sectionRef":"#","url":"/planck/api/Pipeline","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#properties","content":" "},{"title":"Startup​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#Startup","content":"&lt;/&gt; Pipeline.Startup: Pipeline A Pipeline containing the PreStartup, Startup, and PostStartup phases.  "},{"title":"Main​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#Main","content":"&lt;/&gt; Pipeline.Main: Pipeline A Pipeline containing the First, PreUpdate, Update, PostUpdate, and Last phases. "},{"title":"Functions​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#new","content":"&lt;/&gt; Pipeline.new(name: string?) → () Creates a new Pipeline, with an optional name to use for debugging. When no name is provided, the script and line number will be used.  "},{"title":"insert​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#insert","content":"&lt;/&gt; Pipeline:insert(phase: Phase) → Pipeline Adds a Phase to the Pipeline, ordering it implicitly.  "},{"title":"insert​","type":1,"pageTitle":"Pipeline","url":"/planck/api/Pipeline#insert","content":"&lt;/&gt; Pipeline:insert( phase: Phase, after: Phase ) → Pipeline Adds a Phase to the Pipeline after another Phase, ordering it explicitly. "},{"title":"Phase","type":0,"sectionRef":"#","url":"/planck/api/Phase","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#properties","content":" "},{"title":"PreStartup​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreStartup","content":"&lt;/&gt; Phase.PreStartup: Phase Runs before the Startup Phase.  "},{"title":"Startup​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#Startup","content":"&lt;/&gt; Phase.Startup: Phase This Phase will run once, the first time the Scheduler is ran, before any other Phases are ran.  "},{"title":"PostStartup​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PostStartup","content":"&lt;/&gt; Phase.PostStartup: Phase Runs after the Startup phase.  "},{"title":"PreRender​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreRender","content":"&lt;/&gt; Phase.PreRender: Phase Runs on the RunService.PreRender Event.  "},{"title":"PreAnimation​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreAnimation","content":"&lt;/&gt; Phase.PreAnimation: Phase Runs on the RunService.PreAnimation Event.  "},{"title":"PreSimulation​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreSimulation","content":"&lt;/&gt; Phase.PreSimulation: Phase Runs on the RunService.PreSimulation Event.  "},{"title":"PostSimulation​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PostSimulation","content":"&lt;/&gt; Phase.PostSimulation: Phase Runs on the RunService.PostSimulation Event.  "},{"title":"First​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#First","content":"&lt;/&gt; Phase.First: Phase Will always run first on the RunService.Heartbeat Event.  "},{"title":"PreUpdate​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PreUpdate","content":"&lt;/&gt; Phase.PreUpdate: Phase Runs before the Update Phase.  "},{"title":"Update​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#Update","content":"&lt;/&gt; Phase.Update: Phase Runs on the RunService.Heartbeat Event. This is the default Phase systems will run on.  "},{"title":"PostUpdate​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#PostUpdate","content":"&lt;/&gt; Phase.PostUpdate: Phase Runs after the Update Phase.  "},{"title":"Last​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#Last","content":"&lt;/&gt; Phase.Last: Phase Will always run last on the RunService.Heartbeat Event. "},{"title":"Functions​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Phase","url":"/planck/api/Phase#new","content":"&lt;/&gt; Phase.new(name: string?) → () Creates a new Phase, with an optional name to use for debugging. When no name is provided, the script and line number will be used. "},{"title":"Scheduler","type":0,"sectionRef":"#","url":"/planck/api/Scheduler","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#new","content":"&lt;/&gt; Scheduler.new(args: U...) → () Creates a new Scheduler, the args passed will be passed to any System anytime it is ran by the Scheduler.  "},{"title":"runAll​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#runAll","content":"&lt;/&gt; Scheduler:runAll() → Scheduler Runs all Systems within order.  "},{"title":"run​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#run","content":"&lt;/&gt; Scheduler:run(phase: Phase) → Scheduler Runs all Systems tagged with the Phase in order.  "},{"title":"run​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#run","content":"&lt;/&gt; Scheduler:run(pipeline: Pipeline) → Scheduler Runs all Systems tagged with any Phase within the Pipeline in order.  "},{"title":"run​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#run","content":"&lt;/&gt; Scheduler:run(system: System) → Scheduler Runs the System, passing in the arguments of the Scheduler, U....  "},{"title":"insert​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insert","content":"&lt;/&gt; Scheduler:insert(phase: Phase) → Scheduler Initializes the Phase within the Scheduler, ordering it implicitly.  "},{"title":"insert​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insert","content":"&lt;/&gt; Scheduler:insert(pipeline: Pipeline) → Scheduler Initializes all Phases within the Pipeline within the Scheduler, ordering the Pipeline implicitly.  "},{"title":"insert​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insert","content":"&lt;/&gt; Scheduler:insert( phase: Phase, instance: Instance | EventLike, event: string | EventLike ) → Scheduler Initializes the Phase within the Scheduler, ordering it implicitly and scheduling it to be ran on the specified event. local myScheduler = Scheduler.new() :insert(myPhase, RunService, &quot;Heartbeat&quot;)   "},{"title":"insert​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insert","content":"&lt;/&gt; Scheduler:insert( pipeline: Pipeline, instance: Instance | EventLike, event: string | EventLike ) → Scheduler Initializes all Phases within the Pipeline within the Scheduler, ordering the Pipeline implicitly and scheduling it to be ran on the specified event. local myScheduler = Scheduler.new() :insert(myPipeline, RunService, &quot;Heartbeat&quot;)   "},{"title":"insertAfter​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insertAfter","content":"&lt;/&gt; Scheduler:insertAfter( phase: Phase, after: Phase | Pipeline ) → Scheduler Initializes the Phase within the Scheduler, ordering it explicitly after the Phase or Pipeline provided.  "},{"title":"insertAfter​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#insertAfter","content":"&lt;/&gt; Scheduler:insertAfter( pipeline: Pipeline, after: Phase | Pipeline ) → Scheduler Initializes all Phases within the Pipeline within the Scheduler, ordering the Pipeline explicitly after the Phase or Pipeline provided.  "},{"title":"addSystems​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#addSystems","content":"&lt;/&gt; Scheduler:addSystems( systems: System | {System}, phase: Phase? ) → () Adds the System(s) to the Scheduler, scheduling them to be ran implicitly within the provided Phase or on the default Main phase.  "},{"title":"editSystem​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#editSystem","content":"&lt;/&gt; Scheduler:editSystem( system: System, newPhase: Phase ) → () Changes the Phase that this system is scheduled on.  "},{"title":"removeSystem​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#removeSystem","content":"&lt;/&gt; Scheduler:removeSystem(system: System) → () Removes the System from the Scheduler.  "},{"title":"replaceSystem​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#replaceSystem","content":"&lt;/&gt; Scheduler:replaceSystem( old: System, new: System ) → () Replaces the System with a new System.  "},{"title":"setRunCondition​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#setRunCondition","content":"&lt;/&gt; Scheduler:setRunCondition( system: System, fn: (U...) → boolean ) → () Adds a Run Condition which the Scheduler will check before this System is ran.  "},{"title":"setRunCondition​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#setRunCondition","content":"&lt;/&gt; Scheduler:setRunCondition( phase: Phase, fn: (U...) → boolean ) → () Adds a Run Condition which the Scheduler will check before any Systems tagged with this Phase are ran.  "},{"title":"setRunCondition​","type":1,"pageTitle":"Scheduler","url":"/planck/api/Scheduler#setRunCondition","content":"&lt;/&gt; Scheduler:setRunCondition( pipeline: Pipeline, fn: (U...) → boolean ) → () Adds a Run Condition which the Scheduler will check before any Systems within any Phases apart of this Pipeline are ran.\\ \\ This Run Condition will be applied to the Phases themselves. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/planck/docs/intro","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#installation","content":"You can install Planck with Wally [dependencies] Planck = &quot;yetanotherclown/planck@0.1.0&quot;  "},{"title":"The Basics​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#the-basics","content":""},{"title":"Phases​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#phases","content":"A Phase is just a tag you can assign to your systems, it's a way to order systems as a group. local myPhase = Phase.new(&quot;debugName&quot;) scheduler :insert(myPhase, RunService, &quot;Heartbeat&quot;) :addSystems(systemA, myPhase)  "},{"title":"Pipelines​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#pipelines","content":"A Pipeline is a group of ordered phases. Each phase will run in the fixed order to which each Phase was passed to it. local myPipeline = Pipeline.new() :insert(phaseA) :insert(phaseB) :insert(phaseC) scheduler :insert(myPipeline, RunService, &quot;Heartbeat&quot;)  "},{"title":"Built-in Pipelines & Phases​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#built-in-pipelines--phases","content":"Startup​ Systems on these phases will run exactly once, before any other phase runs. PreStartupStartupPostStartup local Planck = require(&quot;@packages/Planck&quot;) local Phase = Planck.Phase local PreStartup = Phase.PreStartup local Startup = Phase.Startup local PostStartup = Phase.PostStartup  Engine Events​ These Phases are ran on Engine RunService Events, events are ran in the order listed. Event\tPhasePreRender\tPreRender PreAnimation\tPreAnimation PreSimulation\tPreSimulation PostSimulation\tPostSimulation Heartbeat\tUpdate local Planck = require(&quot;@packages/Planck&quot;) local Phase = Planck.Phase local PreRender = Phase.PreRender local PreAnimation = Phase.PreAnimation local PreSimulation = Phase.PreSimulation local PostSimulation = Phase.PostSimulation local Update = Phase.Update  Main​ The Main Pipeline will run phases on the RunService.Heartbeat event. FirstPreUpdateUpdatePostUpdateLast local Planck = require(&quot;@packages/Planck&quot;) local Phase = Planck.Phase local First = Phase.First local PreUpdate = Phase.PreUpdate local Update = Phase.Update local PostUpdate = Phase.PostUpdate local Last = Phase.Last  "},{"title":"Systems​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#systems","content":"A system is just a function, or it could be a system table. local systemA = { phase = myPhase, system = function() -- ... end, } local function systemB() -- ... end scheduler :addSystems(systemA) :addSystems(systemB, myPhase)  "},{"title":"The Scheduler​","type":1,"pageTitle":"Introduction","url":"/planck/docs/intro#the-scheduler","content":"The Scheduler is where you initialize all your Pipelines, Phases, and Systems. local Planck = require(&quot;@packages/Planck&quot;) local Phase = Planck.Phase local Pipeline = Planck.Pipeline local Scheduler = Planck.Scheduler local PreUpdate = Phase.new() local Update = Phase.new() local PostUpdate = Phase.new() local UpdatePipeline = Pipeline.new() :insert(PreUpdate) :insert(Update) :insert(PostUpdate) local Render = Phase.new() local scheduler = scheduler.new(world) :insert(UpdatePipeline, RunService, &quot;Heartbeat&quot;) :insertAfter(Render, UpdatePipeline) :addSystems(systems, Update) scheduler:removeSystem(systemA) scheduler:replaceSystem(systemA, systemB) scheduler:editSystem(systemA, newPhase) scheduler:editSystem(systemA) scheduler:setRunCondition(systemA, function(world) return someCondition and true or false end)  "}]